//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QuickWeb {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MonthlyDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MonthlyDataSet : global::System.Data.DataSet {
        
        private sp_MonthlyDataTable tablesp_Monthly;
        
        private sp_AllDataTable tablesp_All;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MonthlyDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MonthlyDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["sp_Monthly"] != null)) {
                    base.Tables.Add(new sp_MonthlyDataTable(ds.Tables["sp_Monthly"]));
                }
                if ((ds.Tables["sp_All"] != null)) {
                    base.Tables.Add(new sp_AllDataTable(ds.Tables["sp_All"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sp_MonthlyDataTable sp_Monthly {
            get {
                return this.tablesp_Monthly;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sp_AllDataTable sp_All {
            get {
                return this.tablesp_All;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MonthlyDataSet cln = ((MonthlyDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["sp_Monthly"] != null)) {
                    base.Tables.Add(new sp_MonthlyDataTable(ds.Tables["sp_Monthly"]));
                }
                if ((ds.Tables["sp_All"] != null)) {
                    base.Tables.Add(new sp_AllDataTable(ds.Tables["sp_All"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablesp_Monthly = ((sp_MonthlyDataTable)(base.Tables["sp_Monthly"]));
            if ((initTable == true)) {
                if ((this.tablesp_Monthly != null)) {
                    this.tablesp_Monthly.InitVars();
                }
            }
            this.tablesp_All = ((sp_AllDataTable)(base.Tables["sp_All"]));
            if ((initTable == true)) {
                if ((this.tablesp_All != null)) {
                    this.tablesp_All.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MonthlyDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MonthlyDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablesp_Monthly = new sp_MonthlyDataTable();
            base.Tables.Add(this.tablesp_Monthly);
            this.tablesp_All = new sp_AllDataTable();
            base.Tables.Add(this.tablesp_All);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesp_Monthly() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesp_All() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MonthlyDataSet ds = new MonthlyDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void sp_MonthlyRowChangeEventHandler(object sender, sp_MonthlyRowChangeEvent e);
        
        public delegate void sp_AllRowChangeEventHandler(object sender, sp_AllRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sp_MonthlyDataTable : global::System.Data.TypedTableBase<sp_MonthlyRow> {
            
            private global::System.Data.DataColumn columnBookingDate;
            
            private global::System.Data.DataColumn columnBookingNumber;
            
            private global::System.Data.DataColumn columnDueDate;
            
            private global::System.Data.DataColumn columnDetails;
            
            private global::System.Data.DataColumn columnMade;
            
            private global::System.Data.DataColumn columnNet_Amt;
            
            private global::System.Data.DataColumn columnCountClothes;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnMobile;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnQty;
            
            private global::System.Data.DataColumn columnDuePayment;
            
            private global::System.Data.DataColumn columnExtraProcessRate1;
            
            private global::System.Data.DataColumn columnExtraProcessRate2;
            
            private global::System.Data.DataColumn columnTax;
            
            private global::System.Data.DataColumn columnTotalCost;
            
            private global::System.Data.DataColumn columnDataColumn1;
            
            private global::System.Data.DataColumn columnDis;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_MonthlyDataTable() {
                this.TableName = "sp_Monthly";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_MonthlyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sp_MonthlyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookingDateColumn {
                get {
                    return this.columnBookingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookingNumberColumn {
                get {
                    return this.columnBookingNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueDateColumn {
                get {
                    return this.columnDueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailsColumn {
                get {
                    return this.columnDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MadeColumn {
                get {
                    return this.columnMade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Net_AmtColumn {
                get {
                    return this.columnNet_Amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountClothesColumn {
                get {
                    return this.columnCountClothes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileColumn {
                get {
                    return this.columnMobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QtyColumn {
                get {
                    return this.columnQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuePaymentColumn {
                get {
                    return this.columnDuePayment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraProcessRate1Column {
                get {
                    return this.columnExtraProcessRate1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraProcessRate2Column {
                get {
                    return this.columnExtraProcessRate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxColumn {
                get {
                    return this.columnTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostColumn {
                get {
                    return this.columnTotalCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn1Column {
                get {
                    return this.columnDataColumn1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisColumn {
                get {
                    return this.columnDis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_MonthlyRow this[int index] {
                get {
                    return ((sp_MonthlyRow)(this.Rows[index]));
                }
            }
            
            public event sp_MonthlyRowChangeEventHandler sp_MonthlyRowChanging;
            
            public event sp_MonthlyRowChangeEventHandler sp_MonthlyRowChanged;
            
            public event sp_MonthlyRowChangeEventHandler sp_MonthlyRowDeleting;
            
            public event sp_MonthlyRowChangeEventHandler sp_MonthlyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsp_MonthlyRow(sp_MonthlyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_MonthlyRow Addsp_MonthlyRow(
                        string BookingDate, 
                        string BookingNumber, 
                        string DueDate, 
                        string Details, 
                        string Made, 
                        string Net_Amt, 
                        string CountClothes, 
                        string Name, 
                        string Address, 
                        string Mobile, 
                        string Balance, 
                        string Qty, 
                        string DuePayment, 
                        string ExtraProcessRate1, 
                        string ExtraProcessRate2, 
                        string Tax, 
                        string TotalCost, 
                        string DataColumn1, 
                        string Dis) {
                sp_MonthlyRow rowsp_MonthlyRow = ((sp_MonthlyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BookingDate,
                        BookingNumber,
                        DueDate,
                        Details,
                        Made,
                        Net_Amt,
                        CountClothes,
                        Name,
                        Address,
                        Mobile,
                        Balance,
                        Qty,
                        DuePayment,
                        ExtraProcessRate1,
                        ExtraProcessRate2,
                        Tax,
                        TotalCost,
                        DataColumn1,
                        Dis};
                rowsp_MonthlyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsp_MonthlyRow);
                return rowsp_MonthlyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sp_MonthlyDataTable cln = ((sp_MonthlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sp_MonthlyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBookingDate = base.Columns["BookingDate"];
                this.columnBookingNumber = base.Columns["BookingNumber"];
                this.columnDueDate = base.Columns["DueDate"];
                this.columnDetails = base.Columns["Details"];
                this.columnMade = base.Columns["Made"];
                this.columnNet_Amt = base.Columns["Net_Amt"];
                this.columnCountClothes = base.Columns["CountClothes"];
                this.columnName = base.Columns["Name"];
                this.columnAddress = base.Columns["Address"];
                this.columnMobile = base.Columns["Mobile"];
                this.columnBalance = base.Columns["Balance"];
                this.columnQty = base.Columns["Qty"];
                this.columnDuePayment = base.Columns["DuePayment"];
                this.columnExtraProcessRate1 = base.Columns["ExtraProcessRate1"];
                this.columnExtraProcessRate2 = base.Columns["ExtraProcessRate2"];
                this.columnTax = base.Columns["Tax"];
                this.columnTotalCost = base.Columns["TotalCost"];
                this.columnDataColumn1 = base.Columns["DataColumn1"];
                this.columnDis = base.Columns["Dis"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBookingDate = new global::System.Data.DataColumn("BookingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookingDate);
                this.columnBookingNumber = new global::System.Data.DataColumn("BookingNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookingNumber);
                this.columnDueDate = new global::System.Data.DataColumn("DueDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueDate);
                this.columnDetails = new global::System.Data.DataColumn("Details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetails);
                this.columnMade = new global::System.Data.DataColumn("Made", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMade);
                this.columnNet_Amt = new global::System.Data.DataColumn("Net_Amt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNet_Amt);
                this.columnCountClothes = new global::System.Data.DataColumn("CountClothes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountClothes);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnMobile = new global::System.Data.DataColumn("Mobile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobile);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnQty = new global::System.Data.DataColumn("Qty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQty);
                this.columnDuePayment = new global::System.Data.DataColumn("DuePayment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuePayment);
                this.columnExtraProcessRate1 = new global::System.Data.DataColumn("ExtraProcessRate1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraProcessRate1);
                this.columnExtraProcessRate2 = new global::System.Data.DataColumn("ExtraProcessRate2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraProcessRate2);
                this.columnTax = new global::System.Data.DataColumn("Tax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTax);
                this.columnTotalCost = new global::System.Data.DataColumn("TotalCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCost);
                this.columnDataColumn1 = new global::System.Data.DataColumn("DataColumn1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataColumn1);
                this.columnDis = new global::System.Data.DataColumn("Dis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDis);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_MonthlyRow Newsp_MonthlyRow() {
                return ((sp_MonthlyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sp_MonthlyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sp_MonthlyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sp_MonthlyRowChanged != null)) {
                    this.sp_MonthlyRowChanged(this, new sp_MonthlyRowChangeEvent(((sp_MonthlyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sp_MonthlyRowChanging != null)) {
                    this.sp_MonthlyRowChanging(this, new sp_MonthlyRowChangeEvent(((sp_MonthlyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sp_MonthlyRowDeleted != null)) {
                    this.sp_MonthlyRowDeleted(this, new sp_MonthlyRowChangeEvent(((sp_MonthlyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sp_MonthlyRowDeleting != null)) {
                    this.sp_MonthlyRowDeleting(this, new sp_MonthlyRowChangeEvent(((sp_MonthlyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesp_MonthlyRow(sp_MonthlyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MonthlyDataSet ds = new MonthlyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sp_MonthlyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sp_AllDataTable : global::System.Data.TypedTableBase<sp_AllRow> {
            
            private global::System.Data.DataColumn columnBookingDate;
            
            private global::System.Data.DataColumn columnBookingNumber;
            
            private global::System.Data.DataColumn columnDueDate;
            
            private global::System.Data.DataColumn columnDetails;
            
            private global::System.Data.DataColumn columnMade;
            
            private global::System.Data.DataColumn columnNet_Amt;
            
            private global::System.Data.DataColumn columnCountClothes;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDuePayment;
            
            private global::System.Data.DataColumn columnProcessRate1;
            
            private global::System.Data.DataColumn columnProcessRate2;
            
            private global::System.Data.DataColumn columnTax;
            
            private global::System.Data.DataColumn columnTotalCost;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_AllDataTable() {
                this.TableName = "sp_All";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_AllDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sp_AllDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookingDateColumn {
                get {
                    return this.columnBookingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookingNumberColumn {
                get {
                    return this.columnBookingNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueDateColumn {
                get {
                    return this.columnDueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailsColumn {
                get {
                    return this.columnDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MadeColumn {
                get {
                    return this.columnMade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Net_AmtColumn {
                get {
                    return this.columnNet_Amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountClothesColumn {
                get {
                    return this.columnCountClothes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DuePaymentColumn {
                get {
                    return this.columnDuePayment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessRate1Column {
                get {
                    return this.columnProcessRate1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessRate2Column {
                get {
                    return this.columnProcessRate2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxColumn {
                get {
                    return this.columnTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostColumn {
                get {
                    return this.columnTotalCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_AllRow this[int index] {
                get {
                    return ((sp_AllRow)(this.Rows[index]));
                }
            }
            
            public event sp_AllRowChangeEventHandler sp_AllRowChanging;
            
            public event sp_AllRowChangeEventHandler sp_AllRowChanged;
            
            public event sp_AllRowChangeEventHandler sp_AllRowDeleting;
            
            public event sp_AllRowChangeEventHandler sp_AllRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsp_AllRow(sp_AllRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_AllRow Addsp_AllRow(string BookingDate, string BookingNumber, string DueDate, string Details, string Made, string Net_Amt, string CountClothes, string Balance, string Rate, string DuePayment, string ProcessRate1, string ProcessRate2, string Tax, string TotalCost) {
                sp_AllRow rowsp_AllRow = ((sp_AllRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BookingDate,
                        BookingNumber,
                        DueDate,
                        Details,
                        Made,
                        Net_Amt,
                        CountClothes,
                        Balance,
                        Rate,
                        DuePayment,
                        ProcessRate1,
                        ProcessRate2,
                        Tax,
                        TotalCost};
                rowsp_AllRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsp_AllRow);
                return rowsp_AllRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sp_AllDataTable cln = ((sp_AllDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sp_AllDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBookingDate = base.Columns["BookingDate"];
                this.columnBookingNumber = base.Columns["BookingNumber"];
                this.columnDueDate = base.Columns["DueDate"];
                this.columnDetails = base.Columns["Details"];
                this.columnMade = base.Columns["Made"];
                this.columnNet_Amt = base.Columns["Net_Amt"];
                this.columnCountClothes = base.Columns["CountClothes"];
                this.columnBalance = base.Columns["Balance"];
                this.columnRate = base.Columns["Rate"];
                this.columnDuePayment = base.Columns["DuePayment"];
                this.columnProcessRate1 = base.Columns["ProcessRate1"];
                this.columnProcessRate2 = base.Columns["ProcessRate2"];
                this.columnTax = base.Columns["Tax"];
                this.columnTotalCost = base.Columns["TotalCost"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBookingDate = new global::System.Data.DataColumn("BookingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookingDate);
                this.columnBookingNumber = new global::System.Data.DataColumn("BookingNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookingNumber);
                this.columnDueDate = new global::System.Data.DataColumn("DueDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueDate);
                this.columnDetails = new global::System.Data.DataColumn("Details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetails);
                this.columnMade = new global::System.Data.DataColumn("Made", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMade);
                this.columnNet_Amt = new global::System.Data.DataColumn("Net_Amt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNet_Amt);
                this.columnCountClothes = new global::System.Data.DataColumn("CountClothes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountClothes);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDuePayment = new global::System.Data.DataColumn("DuePayment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDuePayment);
                this.columnProcessRate1 = new global::System.Data.DataColumn("ProcessRate1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessRate1);
                this.columnProcessRate2 = new global::System.Data.DataColumn("ProcessRate2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcessRate2);
                this.columnTax = new global::System.Data.DataColumn("Tax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTax);
                this.columnTotalCost = new global::System.Data.DataColumn("TotalCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCost);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_AllRow Newsp_AllRow() {
                return ((sp_AllRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sp_AllRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sp_AllRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sp_AllRowChanged != null)) {
                    this.sp_AllRowChanged(this, new sp_AllRowChangeEvent(((sp_AllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sp_AllRowChanging != null)) {
                    this.sp_AllRowChanging(this, new sp_AllRowChangeEvent(((sp_AllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sp_AllRowDeleted != null)) {
                    this.sp_AllRowDeleted(this, new sp_AllRowChangeEvent(((sp_AllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sp_AllRowDeleting != null)) {
                    this.sp_AllRowDeleting(this, new sp_AllRowChangeEvent(((sp_AllRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesp_AllRow(sp_AllRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MonthlyDataSet ds = new MonthlyDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sp_AllDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sp_MonthlyRow : global::System.Data.DataRow {
            
            private sp_MonthlyDataTable tablesp_Monthly;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_MonthlyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesp_Monthly = ((sp_MonthlyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookingDate {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.BookingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BookingDate\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.BookingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookingNumber {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.BookingNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BookingNumber\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.BookingNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DueDate {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.DueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueDate\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.DueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Details {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.DetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Details\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.DetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Made {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.MadeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Made\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.MadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Net_Amt {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.Net_AmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Net_Amt\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.Net_AmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountClothes {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.CountClothesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountClothes\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.CountClothesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mobile {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.MobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mobile\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.MobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Balance {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.BalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Balance\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Qty {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Qty\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuePayment {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.DuePaymentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DuePayment\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.DuePaymentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExtraProcessRate1 {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.ExtraProcessRate1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraProcessRate1\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.ExtraProcessRate1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExtraProcessRate2 {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.ExtraProcessRate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraProcessRate2\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.ExtraProcessRate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tax {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.TaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tax\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.TaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalCost {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.TotalCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCost\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.TotalCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataColumn1 {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.DataColumn1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataColumn1\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.DataColumn1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dis {
                get {
                    try {
                        return ((string)(this[this.tablesp_Monthly.DisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Dis\' in table \'sp_Monthly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_Monthly.DisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookingDateNull() {
                return this.IsNull(this.tablesp_Monthly.BookingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookingDateNull() {
                this[this.tablesp_Monthly.BookingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookingNumberNull() {
                return this.IsNull(this.tablesp_Monthly.BookingNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookingNumberNull() {
                this[this.tablesp_Monthly.BookingNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueDateNull() {
                return this.IsNull(this.tablesp_Monthly.DueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueDateNull() {
                this[this.tablesp_Monthly.DueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailsNull() {
                return this.IsNull(this.tablesp_Monthly.DetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailsNull() {
                this[this.tablesp_Monthly.DetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMadeNull() {
                return this.IsNull(this.tablesp_Monthly.MadeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMadeNull() {
                this[this.tablesp_Monthly.MadeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNet_AmtNull() {
                return this.IsNull(this.tablesp_Monthly.Net_AmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNet_AmtNull() {
                this[this.tablesp_Monthly.Net_AmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountClothesNull() {
                return this.IsNull(this.tablesp_Monthly.CountClothesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountClothesNull() {
                this[this.tablesp_Monthly.CountClothesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablesp_Monthly.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablesp_Monthly.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tablesp_Monthly.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tablesp_Monthly.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileNull() {
                return this.IsNull(this.tablesp_Monthly.MobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileNull() {
                this[this.tablesp_Monthly.MobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tablesp_Monthly.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tablesp_Monthly.BalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQtyNull() {
                return this.IsNull(this.tablesp_Monthly.QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQtyNull() {
                this[this.tablesp_Monthly.QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuePaymentNull() {
                return this.IsNull(this.tablesp_Monthly.DuePaymentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuePaymentNull() {
                this[this.tablesp_Monthly.DuePaymentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraProcessRate1Null() {
                return this.IsNull(this.tablesp_Monthly.ExtraProcessRate1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraProcessRate1Null() {
                this[this.tablesp_Monthly.ExtraProcessRate1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraProcessRate2Null() {
                return this.IsNull(this.tablesp_Monthly.ExtraProcessRate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraProcessRate2Null() {
                this[this.tablesp_Monthly.ExtraProcessRate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxNull() {
                return this.IsNull(this.tablesp_Monthly.TaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxNull() {
                this[this.tablesp_Monthly.TaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCostNull() {
                return this.IsNull(this.tablesp_Monthly.TotalCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCostNull() {
                this[this.tablesp_Monthly.TotalCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataColumn1Null() {
                return this.IsNull(this.tablesp_Monthly.DataColumn1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataColumn1Null() {
                this[this.tablesp_Monthly.DataColumn1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisNull() {
                return this.IsNull(this.tablesp_Monthly.DisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisNull() {
                this[this.tablesp_Monthly.DisColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sp_AllRow : global::System.Data.DataRow {
            
            private sp_AllDataTable tablesp_All;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_AllRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesp_All = ((sp_AllDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookingDate {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.BookingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BookingDate\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.BookingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookingNumber {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.BookingNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BookingNumber\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.BookingNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DueDate {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.DueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueDate\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.DueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Details {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.DetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Details\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.DetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Made {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.MadeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Made\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.MadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Net_Amt {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.Net_AmtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Net_Amt\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.Net_AmtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountClothes {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.CountClothesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountClothes\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.CountClothesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Balance {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.BalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Balance\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rate {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DuePayment {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.DuePaymentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DuePayment\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.DuePaymentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessRate1 {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.ProcessRate1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessRate1\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.ProcessRate1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcessRate2 {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.ProcessRate2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcessRate2\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.ProcessRate2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tax {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.TaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tax\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.TaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalCost {
                get {
                    try {
                        return ((string)(this[this.tablesp_All.TotalCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCost\' in table \'sp_All\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_All.TotalCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookingDateNull() {
                return this.IsNull(this.tablesp_All.BookingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookingDateNull() {
                this[this.tablesp_All.BookingDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookingNumberNull() {
                return this.IsNull(this.tablesp_All.BookingNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookingNumberNull() {
                this[this.tablesp_All.BookingNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueDateNull() {
                return this.IsNull(this.tablesp_All.DueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueDateNull() {
                this[this.tablesp_All.DueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailsNull() {
                return this.IsNull(this.tablesp_All.DetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailsNull() {
                this[this.tablesp_All.DetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMadeNull() {
                return this.IsNull(this.tablesp_All.MadeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMadeNull() {
                this[this.tablesp_All.MadeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNet_AmtNull() {
                return this.IsNull(this.tablesp_All.Net_AmtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNet_AmtNull() {
                this[this.tablesp_All.Net_AmtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountClothesNull() {
                return this.IsNull(this.tablesp_All.CountClothesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountClothesNull() {
                this[this.tablesp_All.CountClothesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tablesp_All.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tablesp_All.BalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tablesp_All.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tablesp_All.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDuePaymentNull() {
                return this.IsNull(this.tablesp_All.DuePaymentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDuePaymentNull() {
                this[this.tablesp_All.DuePaymentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessRate1Null() {
                return this.IsNull(this.tablesp_All.ProcessRate1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessRate1Null() {
                this[this.tablesp_All.ProcessRate1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessRate2Null() {
                return this.IsNull(this.tablesp_All.ProcessRate2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessRate2Null() {
                this[this.tablesp_All.ProcessRate2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxNull() {
                return this.IsNull(this.tablesp_All.TaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxNull() {
                this[this.tablesp_All.TaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCostNull() {
                return this.IsNull(this.tablesp_All.TotalCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCostNull() {
                this[this.tablesp_All.TotalCostColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sp_MonthlyRowChangeEvent : global::System.EventArgs {
            
            private sp_MonthlyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_MonthlyRowChangeEvent(sp_MonthlyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_MonthlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sp_AllRowChangeEvent : global::System.EventArgs {
            
            private sp_AllRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_AllRowChangeEvent(sp_AllRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_AllRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591